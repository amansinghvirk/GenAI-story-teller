import os
import json
import google.generativeai as genai
from langchain_google_genai import GoogleGenerativeAI
from .style_guide import get_story_instructions
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from pydantic import BaseModel, Field


class Story(BaseModel):
    style: dict = Field(..., title="Style", description="HTML CSS style to be used for the story")
    title: str = Field(..., title="Title", description="Title exctracted for the story")
    introduction: str = Field(..., title="Introduction", description="Introduction for the story")
    story: dict = Field(..., title="Story", description="The story generated by the model")


class StoryGenerator:

    def __init__(self, story_theme: str = "General", story_inspiration: str = "General"):
        genai.configure()
        self.language_model = genai.GenerativeModel(os.getenv('LANGUAGE_MODEL'))
        self.image_to_text_model = genai.GenerativeModel(os.getenv('IMAGE_TO_TEXT_MODEL'))
        self.llm = GoogleGenerativeAI(model=os.getenv('LANGUAGE_MODEL'))
        self.story_theme = story_theme
        self.story_inspiration = story_inspiration
        self.story_instructions()


    def set_context(self, context: str=None, topic: str=None) -> str:
        self.topic = topic
        self.context = context
        if topic:
            self.topic = topic
            with open("inputs/prompt_w_topic.txt", 'r') as f:
                prompt = f.read()
                self.prompt_template = prompt
                self.input_variables = ["TOPIC", "instructions_placeholder"]

        elif context:
            self.context = context
            with open("inputs/prompt_w_context.txt", 'r') as f:
                prompt = f.read()
                self.prompt_template = prompt
                self.input_variables = ["instructions_placeholder", "context_placeholder"]
            
        else:
            self.prompt_template = "Generate a story on {TOPIC} \nINSTRUCTIONS: \n {instructions_placeholder}"
            self.input_variables = ["TOPIC", "instructions_placeholder"]


    def set_image_context(self, img) -> str:

        self.image = img
        with open("inputs/image_to_text_prompt.txt", 'r') as f:
            prompt = f.read()

        self.image_prompt = [prompt, self.image]
        self.context = self.image_to_text_model.generate_content(self.image_prompt).text
        with open("inputs/prompt_w_context.txt", 'r') as f:
            prompt = f.read()
            self.prompt_template = prompt
            self.input_variables = ["instructions_placeholder", "context_placeholder"]
    
    def generate_response(self) -> str:
    
        try:

            print("Generating story ...")


            # Set up a parser + inject instructions into the prompt template.
            parser = JsonOutputParser(pydantic_object=Story)
            

            self.prompt = PromptTemplate(
                template=self.prompt_template,
                input_variables=self.input_variables,
                partial_variables={"format_instructions": parser.get_format_instructions()},
            )
            if "context_placeholder" in self.input_variables:
                chain = self.prompt | self.llm | parser

                self.response = chain.invoke(
                    {"instructions_placeholder": self.instrucitons,
                    "context_placeholder": self.context},
                )
            else:
                if self.topic is None:
                    self.topic = "Random"
                
                chain = self.prompt | self.llm | parser
                self.response = chain.invoke(
                    {"instructions_placeholder": self.instrucitons,
                    "TOPIC": self.topic},
                )

            return self.response
        
        except Exception as e:
            raise e
        

    def story_instructions(self):

        self.n_words = 1000
        self.story_parts = self.n_words // 200
        self.instrucitons = f"""
            You are an expert storyteller and visual content creator. Your task is to generate a compelling and visually engaging story based on provided context. The output should be structured for easy integration into a web application.

            **STORY GENERATION:**

            1.  **Story Length:** The generated story must not exceed a {self.n_words}  word count.
            2.  **Story Segmentation:** Divide the story into a {self.story_parts} number of parts. Each part should flow logically to create a cohesive narrative. 
            3.  **Story Theme:** The story must adhere to a given theme, which will be represented by {self.story_theme}. Ensure the plot, characters, and overall tone align with this theme.
            4.  **Inspiration Source:** Draw inspiration from the provided source, represented by {self.story_inspiration}. This could be a specific event, a historical figure, a literary work, or any other relevant input. Let the inspiration influence the story's narrative, but don't plagiarize directly.
            5. **Title:** Create a concise and engaging title for the story.
            6.  **Introduction:** Craft a brief introduction (50-60 words) that sets the scene, introduces the main idea, and piques the reader's interest.

            **IMAGE PROMPT GENERATION (For Each Story Part):**

            1.  **Purpose:** Generate a distinct, concise, and clear image prompt for each story part. These prompts will be used by a separate image generation model.
            2.  **Context Alignment:** Ensure each image prompt aligns directly with the content of its respective story part.
            3.  **Visual Style:** The generated images should:
                *   Have a light and predominantly white background to accommodate text overlay.
                *   Convey a calm and joyful mood, avoiding anything scary or disturbing.
                *   Include an area (approximately 1/3 of the image area) at a corner or side that is relatively free of content, specifically designed for text placement.
            4.  **Prompt Clarity:** The image prompts must be concise, focusing on key visual elements, and avoid unnecessary detail.
            5.  **Prompt Safety:** Prompt should follow the responsible AI guidelines and Do not include anything related to child, sexual orientation, realted to any race, image prompt should be 
                appropriate to the general audience without hurting any sentiments
            6.  **Characters:** If prompt includes to generate any character, person, imaginary figure, then add details of those so that other similar
                prompts of the story parts images should have same characters/persons/imaginary figures in the images.

            **HTML STYLE GUIDE:**

            1.  **Purpose:** Define a cohesive and aesthetically pleasing style guide for the HTML formatting of the story. This will include the background color, font color, and font family.
            2.  **Context Matching:** The style guide must complement the story theme, image styles, and be visually appealing to the target audience. Aim for a smooth, comfortable reading experience that enhances engagement.
            3.  **Specific Attributes:** The style guide will include:
                *   `background-color`: a background color suitable for the story's theme and image aesthetic.
                *   `font-color`: a font color that provides sufficient contrast against the background, ensuring easy readability.
                *   `font-family`:  a readable font family that fits the overall tone and style of the story and image theme.

            **OUTPUT FORMAT (JSON):**

            1.  **Structure:** The output MUST be in JSON format.
            2.  **Top-Level Keys:** The JSON object must contain the following top-level keys: `style`, `title`, `introduction`, and `story`.
                *   `style`: should contain the HTML style parameters which will be passed to HTML component
                    * `background-color`: color to be used as background color for html
                    * `font-color`: color to be used as font color for the story text
                    * `font-family`: which font will be best suited for the story
                *   `title`: The generated title of the story.
                *   `introduction`: The short introduction to the story.
                *   `story`:  A nested JSON object that contains each story part.
            3.  **Story Parts:** The `story` object will be a nested structure where each key represents a story part number (e.g., `part_1`, `part_2`, etc.).
            4.  **Part Contents:** Each story part (e.g., `part_1`, `part_2`, etc.) will be a nested JSON object with the following keys:
                *   `story`: The generated content of that particular story part.
                *   `image_prompt`: The image prompt for that specific story part.

            **Example JSON structure:**

            ```json
                "style": 
                    "background-color": "#f0f8ff",
                    "font-color": "#333",
                    "font-family": "Arial, sans-serif"
                ,
                "title": "The Magical Treehouse Adventure",
                "introduction": "Lily and Tom discover a hidden treehouse in their backyard, leading them on an amazing adventure through enchanted lands and whimsical creatures.",
                "story": 
                    "part_1": 
                        "story": "The sun peeked through the leaves as Lily and Tom stumbled upon a rickety ladder leading to a treehouse hidden among the branches.",
                        "image_prompt": "A sunny, whimsical treehouse hidden in a lush forest with a ladder leading up to it. Light background, 1/3 of a corner should be free for the text."
                    ,
                    "part_2": 
                        "story": "Inside, they found a sparkling map that promised a journey to the land of talking animals.",
                        "image_prompt": "Inside the treehouse, a map glitters invitingly, surrounded by simple wooden furniture, light background, 1/3 corner free for text"
                    ,
                    "part_3": 
                        "story": "They met a friendly fox who gave them directions to the land of happy smiles",
                        "image_prompt": "A smiling fox and two young children standing on a path surrounded by lush green grass, light background, 1/3 corner free for text"
                     
            ```
                    
        """